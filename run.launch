<launch>
    <node name="loader" pkg="mdet" type="loader" output="screen">

        <!--<param name="velodyne_dir" value="/data/kitti/dataset/sequences/04/velodyne"/>-->
        <!--<param name="annot_dir" value="/data/kitti/dataset/sequences/04/ground"/>-->
        <!--<param name="poses_file" value="/data/kitti/dataset/poses/04.txt"/>-->
        <!--<param name="cache_dir" value="/data/kitti/dataset/sequences/04cache"/>-->
        <!--<param name="start_frame" value="80"/>-->




        <param name="velodyne_dir" value="/data/kitti/filtered/07_1/velodyne"/>
        <param name="annot_dir" value="/data/kitti/filtered/07_1/ground"/>
        <param name="poses_file" value="/data/kitti/filtered/07_1/poses.txt"/>
        <param name="cache_dir" value="/data/kitti/filtered/07_1/cache"/>
        <param name="start_frame" value="80"/>



        <param name="enable_cache" value="true"/>

        <param name="throttle_duration" value="0.5"/>
        <param name="wait_for_requests" value="true"/>
        <param name="initial_publish" value="false"/>
    </node>

    <node pkg="tf" type="static_transform_publisher" name="tf_velodyne_optical" args="0 0 0 0.0 0.0 0.0 /velodyne /velodyne_optical 10"/>

    <node pkg="tf" type="static_transform_publisher" name="tf_leftcam_optical" args="0 0 0 0.0 0.0 0.0 /leftcam /leftcam_optical 10"/>


    <node pkg="tf" type="static_transform_publisher" name="tf_leftcam" args="0 0 0 0.0 0.0 0.0 /velodyne /leftcam 10"/>

    <node pkg="tf" type="static_transform_publisher" name="tf_velodyne" args="0 0 1.73 0.0 0.0 0.0 /base_link /velodyne 10"/>

    <node pkg="tf" type="static_transform_publisher" name="tf_base_link" args="0 0 0 0.0 0.0 0.0 /odom /base_link 10"/>


    <!--<node pkg="tf" type="static_transform_publisher" name="tf_odom" args="0 0 0 0.0 0.0 0.0 /map /odom 10"/>-->

    <node pkg="tf" type="static_transform_publisher" name="tf_map" args="0 0 0 0.0 0.0 0.0 /world /map 10"/>



    <node name="pose_odometry" pkg="mdet" type="pose_odometry" />


    <!-- Pointcloud to planar scan-->

    <!--<node name="pointcloud_to_laserscan" pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node">-->
    <!--<param name="target_frame" value="odom"/>-->
    <!--<param name="transform_tolerance" value="0.0"/>-->
    <!--<param name="min_height" value="-0.1"/>-->
    <!--<param name="max_height" value="2"/>-->

    <!--<param name="range_min" value="0.0"/>-->
    <!--<param name="range_max" value="100.0"/>-->
    <!--<param name="angle_min" value="-3.14"/>-->
    <!--<param name="angle_max" value="3.14"/>-->

    <!--<param name="angle_increment" value="0.0013962634" /> &lt;!&ndash; 2 * pi / 4500 &ndash;&gt;-->
    <!--<remap from="cloud_in" to="point_cloud_obstacles"/>-->
    <!--</node>-->



    <node name="local_grid" pkg="mdet" type="local_grid">
        <remap from="laser_scan" to="/scan"/>

        <remap from="point_cloud_scan" to="/point_cloud_obstacles"/>

        <param name="target_frame" value="odom"/>
        <param name="max_range" value="100.0"/>
        <param name="range_increment" value="0.2"/>
    </node>

    <node name="requester" pkg="mdet" type="requester.py" output="screen"/>

    <node name="particle_filter" pkg="mdet" type="particle_filter_main.py" output="screen"/>



    <node name="rviz" pkg="rviz" type="rviz">
    </node>


    <!--VoxelGrid  for subsampling of accumulated point clouds-->

    <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />

    <node pkg="nodelet" type="nodelet" name="ground_voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
        <remap from="~input" to="acc_point_cloud_ground" />
        <remap from="~output" to="acc_point_cloud_ground_voxel_filtered"/>
        <rosparam>
            filter_field_name: z
            filter_limit_min: -10
            filter_limit_max: 10
            filter_limit_negative: False
            leaf_size: 0.1
            max_queue_size: 1
        </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet" name="static_voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
        <remap from="~input" to="acc_point_cloud_obstacles_static" />
        <remap from="~output" to="acc_point_cloud_obstacles_static_voxel_filtered"/>
        <rosparam>
            filter_field_name: z
            filter_limit_min: -10
            filter_limit_max: 10
            filter_limit_negative: False
            leaf_size: 0.1
            max_queue_size: 1
        </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet" name="dynamic_voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
        <remap from="~input" to="acc_point_cloud_obstacles_dynamic" />
        <remap from="~output" to="acc_point_cloud_obstacles_dynamic_voxel_filtered"/>
        <rosparam>
            filter_field_name: z
            filter_limit_min: -10
            filter_limit_max: 10
            filter_limit_negative: False
            leaf_size: 0.1
            max_queue_size: 1
        </rosparam>
    </node>

</launch>